// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  ssl      = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model City {
  id        Int    @id @default(autoincrement())
  extention String
  name      String
  sequence  String
  roadId    Int    @map("road_id")
  roads     Roads  @relation(fields: [roadId], references: [id])

  @@map("city")
}

model Company {
  id   Int    @id @default(autoincrement())
  name String

  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime?      @updatedAt @map("updated_at")
  deletedAt    DateTime?      @map("deleted_at")
  userXCompany UserXCompany[]
  videos       Videos[]

  @@map("company")
}

model Iggs {
  id          Int      @id @default(autoincrement())
  date        DateTime
  level       Level
  regional    String
  videoId     Int      @map("video_id")
  roadId      Int      @map("road_id")
  section     String
  description String   @db.Text

  deletedAt DateTime? @map("deleted_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  roads  Roads   @relation(fields: [roadId], references: [id])
  videos Videos? @relation(fields: [videoId], references: [id])

  reports  Reports[]
  patology Patology[]

  @@map("iggs")
}

model Patology {
  id            Int     @id @default(autoincrement())
  acronym       String
  code          String
  cracks        String  @db.Text
  descrption    String
  iggsId        Int?
  km            String
  level         Level
  roadId        Int     @map("road_id")
  roadSide      String  @map("road_side") @db.Text
  reportId      Int?    @map("report_id")
  screenshotUrl String  @map("screenshot_url")
  type          String
  videoId       Int     @map("video_id")
  videoTime     String  @map("video_time")
  observation   String? @db.Text
  sags          String? @db.Text
  otherDefects  String? @db.Text
  latitude      String? @db.Text
  longitude     String? @db.Text

  roads   Roads    @relation(fields: [roadId], references: [id])
  videos  Videos   @relation(fields: [videoId], references: [id])
  iggs    Iggs?    @relation(fields: [iggsId], references: [id])
  respots Reports? @relation(fields: [reportId], references: [id])

  @@map("patology")
}

model Points {
  id          Int    @id @default(autoincrement())
  type        String
  latitude    String
  longitude   String
  description String @db.Text
  kilometer   String
  roadId      Int    @map("road_id")

  roads Roads @relation(fields: [roadId], references: [id])

  @@map("points")
}

model Reports {
  id          Int       @id @default(autoincrement())
  level       Level
  initialKm   String    @map("initial_km")
  finalKm     String    @map("final_km")
  section     String
  description String    @db.Text
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  iggId   Int @map("igg_id")
  videoId Int @map("video_id")
  userId  Int @map("user_id")

  iggs     Iggs       @relation(fields: [iggId], references: [id])
  users    Users      @relation(fields: [userId], references: [id])
  videos   Videos     @relation(fields: [videoId], references: [id])
  patology Patology[]

  @@map("reports")
}

model Revetment {
  id        Int    @id @default(autoincrement())
  type      String
  extention String
  roadId    Int    @map("road_id")

  roads Roads @relation(fields: [roadId], references: [id])

  @@map("revetments")
}

model Roads {
  id        Int                @id @default(autoincrement())
  extention String
  mesh      String
  regional  String
  acronym   String             @unique
  url       String
  kml       String
  revesment String
  stretch   String             @db.Text
  uf        StatesAbbreviation

  city      City[]
  iggs      Iggs[]
  patology  Patology[]
  points    Points[]
  revetment Revetment[]
  videos    Videos[]

  @@map("roads")
}

model Users {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String
  name          String
  cpf           String?   @unique
  position      Position  @default(ANALYST_ENGINEER)
  phone         String?   @unique
  enrollment    String?   @unique
  corporationId Int?      @map("corporation_id")
  token         String?   @db.VarChar(500)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")

  reports      Reports[]
  userXCompany UserXCompany[]
  videos       Videos[]

  @@map("users")
}

model UserXCompany {
  id        Int @id @default(autoincrement())
  userId    Int @map("user_id")
  companyId Int @map("company_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  users   Users   @relation(fields: [userId], references: [id])
  company Company @relation(fields: [companyId], references: [id])

  @@map("user_x_company")
}

model Videos {
  id        Int              @id @default(autoincrement())
  url       String
  date      DateTime
  extension String
  kmInitial String           @map("km_initial")
  kmFinal   String           @map("km_final")
  core      String
  processed ProcessingStatus @default(PENDING)
  stretch   String
  roadId    Int              @map("road_id")
  companyId Int              @map("company_id")
  createdBy Int              @map("created_by")

  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  company Company @relation(fields: [companyId], references: [id])
  roads   Roads   @relation(fields: [roadId], references: [id])
  users   Users   @relation(fields: [createdBy], references: [id])

  iggs     Iggs[]
  patology Patology[]
  reports  Reports[]

  @@map("videos")
}

// Enums

enum Level {
  MAIN
  SUB
}

enum Position {
  ADMIN
  ENGINEER
  ANALYST_ENGINEER
  ARCHITECT
  INTERN
  OTHER
}

enum StatesAbbreviation {
  AC
  AL
  AP
  AM
  BA
  CE
  DF
  ES
  GO
  MA
  MT
  MS
  MG
  PA
  PB
  PR
  PE
  PI
  RJ
  RN
  RS
  RO
  RR
  SC
  SP
  SE
  TO
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  PROCESSED
}